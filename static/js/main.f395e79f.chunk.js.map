{"version":3,"sources":["tetrominos.js","components/Cell.js","components/Stage.js","components/Display.js","components/StartButton.js","gameHelpers.js","hooks/useStage.js","starter_files/react-tetris-starter-files-master/7d07efbb80dc3ad37a85c239f699422d.jpg","starter_files/react-tetris-starter-files-master/bg.png","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","reportWebVitals.js","index.js"],"names":["TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","tetrominos","randTetromino","Math","floor","random","length","StyledCell","styled","div","props","type","Cell","console","log","Stage","stage","StyledStage","width","height","map","row","cell","x","StyledDisplay","gameover","Display","text","StyledStartButton","StartButton","callback","onClick","createStage","Array","from","fill","checkCollision","player","moveX","moveY","y","tetromino","pos","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","StyledTetrisWrapper","bgImage2","StyledTetris","Tetris","dropTime","setDropTime","gameOver","setGameOver","setPlayer","rotate","matrix","dir","mtrx","_","index","column","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","move","keyCode","role","tabIndex","onKeyDown","e","onKeyUp","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f395e79f.chunk.js","sourcesContent":["export const TETROMINOS = {\r\n    0: { shape: [[0]], color: '0, 0, 0' },\r\n    I: {\r\n      shape: [[0, 'I', 0, 0], [0, 'I', 0, 0], [0, 'I', 0, 0], [0, 'I', 0, 0]],\r\n      color: '80, 227, 230',\r\n    },\r\n    J: { shape: [[0, 'J', 0], [0, 'J', 0], ['J', 'J', 0]], color: '36, 95, 223' },\r\n    L: {\r\n      shape: [[0, 'L', 0], [0, 'L', 0], [0, 'L', 'L']],\r\n      color: '223, 173, 36',\r\n    },\r\n    O: { shape: [['O', 'O'], ['O', 'O']], color: '223, 217, 36' },\r\n    S: { shape: [[0, 'S', 'S'], ['S', 'S', 0], [0, 0, 0]], color: '48, 211, 56' },\r\n    T: {\r\n      shape: [[0, 0, 0], ['T', 'T', 'T'], [0, 'T', 0]],\r\n      color: '132, 61, 198',\r\n    },\r\n    Z: { shape: [['Z', 'Z', 0], [0, 'Z', 'Z'], [0, 0, 0]], color: '227, 78, 78' },\r\n  };\r\nexport const randomTetromino = () => {\r\n    const tetrominos = 'IJLOSTZ';\r\n    const randTetromino = tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n    return TETROMINOS[randTetromino];\r\n}","import React from 'react';\r\nimport { TETROMINOS } from '../tetrominos';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledCell = styled.div`\r\nwidth: auto;\r\n/* border-radius: 5px; */\r\nbackground: rgba(${props => props.color}, 0.8);\r\nborder: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\r\nborder-bottom-color: rgba(${props => props.color}, 0.1);\r\nborder-right-color: rgba(${props => props.color}, 1);\r\nborder-top-color: rgba(${props => props.color}, 1);\r\nborder-left-color: rgba(${props => props.color}, 0.3);`\r\n\r\nconst Cell = ({ type }) => (\r\n    <StyledCell type={type} color={TETROMINOS[type].color}>\r\n        {console.log('rerender cell')}\r\n    </StyledCell>\r\n)\r\nexport default Cell;","import React from 'react';\r\nimport Cell from './Cell';\r\nimport styled from 'styled-components';\r\nconst Stage = ({ stage }) => (\r\n    <StyledStage width={stage[0].length} height={stage.length}>\r\n      {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\r\n    </StyledStage>\r\n  );\r\nexport default Stage;\r\n\r\nconst StyledStage = styled.div`\r\ndisplay: grid;\r\ngrid-template-rows: repeat(\r\n  ${props => props.height},\r\n  calc(25vw / ${props => props.width})\r\n);\r\ngrid-template-columns: repeat(${props => props.width}, 1fr);\r\ngrid-gap: 1px;\r\nborder: 2px solid #333;\r\nwidth: 100%;\r\nmax-width: 25vw;\r\nbackground: #111;\r\n`","import React from 'react';\r\nimport styled from 'styled-components';\r\nconst Display = ({gameover, text}) => (\r\n    <StyledDisplay gameover={gameover} >{text}</StyledDisplay>\r\n)\r\n\r\nconst StyledDisplay = styled.div`\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    align-items: center;\r\n    margin: 0 0 20px 0;\r\n    padding: 20px;\r\n    border: 4px solid #333;\r\n    min-height:30px;\r\n    width: 100%;\r\n    border-radius: 20px;\r\n    color: ${props => (props.gameover ? 'red': 'gray')};\r\n    background : #000;\r\n    font-family: Pixel, Arial, Helvetica, sans-serif;\r\n    font-size: 0.8rem;\r\n`\r\nexport default Display","import React from 'react';\r\nimport styled from 'styled-components';\r\nconst StartButton = ({callback}) => (\r\n    <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\r\n)\r\n\r\nconst StyledStartButton = styled.div`\r\n    box-sizing: border-box;\r\n    margin : 0 0 20px 0;\r\n    padding: 20px;\r\n    min-height: 30px;\r\n    width: 100%;\r\n    border-radius: 20px;\r\n    border: none;\r\n    color:white;\r\n    background: #333;\r\n    font-family: Pixel, Arial, Helvetica, sans-serif;\r\n    font-size:1rem;\r\n    outline: none\r\n    cursor: pointer;\r\n`\r\n\r\nexport default StartButton;","export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () =>\r\n  Array.from(Array(STAGE_HEIGHT), () => Array(STAGE_WIDTH).fill([0, 'clear']));\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n\r\n  // Using for loops to be able to return (and break). Not possible with forEach\r\n  for (let y = 0; y < player.tetromino.length; y += 1) {\r\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\r\n      // 1. Check that we're on an actual Tetromino cell\r\n      if (player.tetromino[y][x] !== 0) {\r\n        if (\r\n          // 2. Check that our move is inside the game areas height (y)\r\n          // That we're not go through bottom of the play area\r\n          !stage[y + player.pos.y + moveY] ||\r\n          // 3. Check that our move is inside the game areas width (x)\r\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n          // 4. Check that the cell wer'e moving to isn't set to clear\r\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\r\n            'clear'\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // 5. If everything above is false\r\n  return false;\r\n};","import { useState, useEffect } from 'react';\r\nimport { createStage } from '../gameHelpers';\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n  const [stage, setStage] = useState(createStage());\r\n  const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setRowsCleared(0);\r\n    const sweepRows = newStage =>\r\n      newStage.reduce((ack, row) => {\r\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n          setRowsCleared(prev => prev + 1);\r\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\r\n          return ack;\r\n        }\r\n        ack.push(row);\r\n        return ack;\r\n      }, []);\r\n\r\n    const updateStage = prevStage => {\r\n      // First flush the stage\r\n      const newStage = prevStage.map(row =>\r\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\r\n      );\r\n\r\n      // Then draw the tetromino\r\n      player.tetromino.forEach((row, y) => {\r\n        row.forEach((value, x) => {\r\n          if (value !== 0) {\r\n            newStage[y + player.pos.y][x + player.pos.x] = [\r\n              value,\r\n              `${player.collided ? 'merged' : 'clear'}`,\r\n            ];\r\n          }\r\n        });\r\n      });\r\n      // Then check if we got some score if collided\r\n      if (player.collided) {\r\n        resetPlayer();\r\n        return sweepRows(newStage);\r\n      }\r\n      return newStage;\r\n    };\r\n\r\n    // Here are the updates\r\n    setStage(prev => updateStage(prev));\r\n  }, [\r\n    player.collided,\r\n    player.pos.x,\r\n    player.pos.y,\r\n    player.tetromino,\r\n    resetPlayer,\r\n  ]);\r\n\r\n  return [stage, setStage, rowsCleared];\r\n};","export default __webpack_public_path__ + \"static/media/7d07efbb80dc3ad37a85c239f699422d.0cbabe97.jpg\";","export default __webpack_public_path__ + \"static/media/bg.d63cfd51.png\";","import React, { useState } from 'react';\r\nimport Stage from './Stage';\r\nimport Display from './Display';\r\nimport StartButton from './StartButton';\r\nimport { createStage, checkCollision } from '../gameHelpers';\r\nimport styled from 'styled-components';\r\nimport { usePlayer } from '../hooks/usePlayer';\r\nimport { useStage } from '../hooks/useStage';\r\nimport { useGameStatus } from '../hooks/useGameStatus';\r\nimport { useInterval } from '../hooks/useInterval';\r\nimport bgImage1 from '../starter_files/react-tetris-starter-files-master/7d07efbb80dc3ad37a85c239f699422d.jpg'\r\nimport bgImage2 from '../starter_files/react-tetris-starter-files-master/bg.png'\r\nconst Tetris = () => {\r\n    const [dropTime, setDropTime] = useState(null);\r\n    const [gameOver, setGameOver] = useState(false);\r\n\r\n    const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n    const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n    const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\r\n\r\n    console.log('re-render');\r\n\r\n    const movePlayer = dir => {\r\n        if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n            updatePlayerPos({ x: dir, y: 0 });\r\n        }\r\n    };\r\n\r\n    const keyUp = ({ keyCode }) => {\r\n        if (!gameOver) {\r\n            // Activate the interval again when user releases down arrow.\r\n            if (keyCode === 40) {\r\n                setDropTime(1000 / (level + 1));\r\n            }\r\n        }\r\n    };\r\n\r\n    const startGame = () => {\r\n        // Reset everything\r\n        setStage(createStage());\r\n        setDropTime(1000);\r\n        resetPlayer();\r\n        setScore(0);\r\n        setLevel(0);\r\n        setRows(0);\r\n        setGameOver(false);\r\n    };\r\n\r\n    const drop = () => {\r\n        // Increase level when player has cleared 10 rows\r\n        if (rows > (level + 1) * 10) {\r\n            setLevel(prev => prev + 1);\r\n            // Also increase speed\r\n            setDropTime(1000 / (level + 1) + 200);\r\n        }\r\n\r\n        if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n            updatePlayerPos({ x: 0, y: 1, collided: false });\r\n        } else {\r\n            // Game over!\r\n            if (player.pos.y < 1) {\r\n                console.log('GAME OVER!!!');\r\n                setGameOver(true);\r\n                setDropTime(null);\r\n            }\r\n            updatePlayerPos({ x: 0, y: 0, collided: true });\r\n        }\r\n    };\r\n\r\n    const dropPlayer = () => {\r\n        // We don't need to run the interval when we use the arrow down to\r\n        // move the tetromino downwards. So deactivate it for now.\r\n        setDropTime(null);\r\n        drop();\r\n    };\r\n\r\n    // This one starts the game\r\n    // Custom hook by Dan Abramov\r\n    useInterval(() => {\r\n        drop();\r\n    }, dropTime);\r\n\r\n    const move = ({ keyCode }) => {\r\n        if (!gameOver) {\r\n            if (keyCode === 37) {\r\n                movePlayer(-1);\r\n            } else if (keyCode === 39) {\r\n                movePlayer(1);\r\n            } else if (keyCode === 40) {\r\n                dropPlayer();\r\n            } else if (keyCode === 38) {\r\n                playerRotate(stage, 1);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <StyledTetrisWrapper\r\n            role=\"button\"\r\n            tabIndex=\"0\"\r\n            onKeyDown={e => move(e)}\r\n            onKeyUp={keyUp}\r\n        >\r\n            <StyledTetris>\r\n                <Stage stage={stage} />\r\n                <aside>\r\n                    {gameOver ? (\r\n                        <Display gameOver={gameOver} text=\"Game Over\" />\r\n                    ) : (\r\n                        <div>\r\n                            <Display text={`Score: ${score}`} />\r\n                            <Display text={`rows: ${rows}`} />\r\n                            <Display text={`Level: ${level}`} />\r\n                        </div>\r\n                    )}\r\n                    <StartButton callback={startGame} />\r\n                </aside>\r\n            </StyledTetris>\r\n        </StyledTetrisWrapper>\r\n    );\r\n};\r\n\r\n\r\nconst StyledTetrisWrapper = styled.div`\r\nwidth: 100vw;\r\nheight: 100vh;\r\nbackground: url(${bgImage2}) #000;\r\nbackground-size: cover;\r\noverflow: hidden;\r\n\r\n`\r\n\r\nconst StyledTetris = styled.div`\r\ndisplay: flex;\r\nalign-items: flex-start;\r\npadding: 40px;\r\nmargin: 0 auto;\r\nmax-width: 900px;\r\naside {\r\n  width: 100%;\r\n  max-width: 200px;\r\n  display: block;\r\n  padding: 0 20px;\r\n`\r\n\r\n\r\nexport default Tetris;","import { useState, useCallback } from 'react';\r\n\r\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\r\nimport { checkCollision, STAGE_WIDTH } from '../gameHelpers';\r\n\r\nexport const usePlayer = () => {\r\n  const [player, setPlayer] = useState({\r\n    pos: { x: 0, y: 0 },\r\n    tetromino: TETROMINOS[0].shape,\r\n    collided: false,\r\n  });\r\n\r\n  function rotate(matrix, dir) {\r\n    // Make the rows to become cols (transpose)\r\n    const mtrx = matrix.map((_, index) => matrix.map(column => column[index]));\r\n    // Reverse each row to get a rotaded matrix\r\n    if (dir > 0) return mtrx.map(row => row.reverse());\r\n    return mtrx.reverse();\r\n  }\r\n\r\n  function playerRotate(stage, dir) {\r\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n    const pos = clonedPlayer.pos.x;\r\n    let offset = 1;\r\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n      clonedPlayer.pos.x += offset;\r\n      offset = -(offset + (offset > 0 ? 1 : -1));\r\n      if (offset > clonedPlayer.tetromino[0].length) {\r\n        rotate(clonedPlayer.tetromino, -dir);\r\n        clonedPlayer.pos.x = pos;\r\n        return;\r\n      }\r\n    }\r\n    setPlayer(clonedPlayer);\r\n  }\r\n\r\n  const updatePlayerPos = ({ x, y, collided }) => {\r\n    setPlayer(prev => ({\r\n      ...prev,\r\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n      collided,\r\n    }));\r\n  };\r\n\r\n  const resetPlayer = useCallback(() => {\r\n    setPlayer({\r\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n      tetromino: randomTetromino().shape,\r\n      collided: false,\r\n    });\r\n  }, []);\r\n\r\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n};","import { useState, useEffect, useCallback } from 'react';\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n  const [score, setScore] = useState(0);\r\n  const [rows, setRows] = useState(0);\r\n  const [level, setLevel] = useState(0);\r\n\r\n  const linePoints = [40, 100, 300, 1200];\r\n\r\n  const calcScore = useCallback(() => {\r\n    // We have score\r\n    if (rowsCleared > 0) {\r\n      // This is how original Tetris score is calculated\r\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n      setRows(prev => prev + rowsCleared);\r\n    }\r\n  }, [level, linePoints, rowsCleared]);\r\n\r\n  useEffect(() => {\r\n    calcScore();\r\n  }, [calcScore, rowsCleared, score]);\r\n\r\n  return [score, setScore, rows, setRows, level, setLevel];\r\n};","import { useEffect, useRef } from 'react';\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay);\r\n      return () => {\r\n        clearInterval(id);\r\n      };\r\n    }\r\n  }, [delay]);\r\n}","import React from 'react';\nimport Tetris from './components/Tetris';\n\nconst App =() =>{\n  return (\n  <div className=\"App\">\n    <Tetris />\n  </div>\n  )\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n//import TestState from './test/testState'\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}